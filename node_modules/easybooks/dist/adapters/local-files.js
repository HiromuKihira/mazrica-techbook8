"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const mkdirp_1 = __importDefault(require("mkdirp"));
const copyFile = util_1.promisify(fs_1.default.copyFile);
const readDir = util_1.promisify(fs_1.default.readdir);
const readFile = util_1.promisify(fs_1.default.readFile);
const writeFile = util_1.promisify(fs_1.default.writeFile);
/**
 * dir で指定したディレクトリ以下にあるファイルを
 * 再帰的に全て取得する
 * @param dir - ディレクトリ名（相対・絶対指定可）
 * @returns ファイル名一覧
 */
exports.readProjectDirRecursive = async (dir) => {
    const entries = await readDir(dir, { withFileTypes: true });
    return [].concat(...(await Promise.all(entries.map(async (entry) => {
        const filename = path_1.default.join(dir, entry.name);
        if (entry.isDirectory()) {
            return exports.readProjectDirRecursive(filename);
        }
        else {
            return [filename];
        }
    }))));
};
/**
 * srcDir以下の全部ファイルをそのままdestDir以下にコピーする
 * ディレクトリが無い場合は自動で作成される
 * @param srcDir - コピー元ディレクトリ名（相対・絶対指定可）
 * @param destDir - コピー先ディレクトリ名（相対・絶対指定可）
 */
exports.copyFileRecursive = async (srcDir, destDir) => {
    const s = path_1.default.resolve(srcDir);
    const d = path_1.default.resolve(destDir);
    const entries = await exports.readProjectDirRecursive(s);
    await Promise.all(entries.map(name => {
        const destName = path_1.default.join(d, name.substring(s.length));
        mkdirp_1.default.sync(path_1.default.dirname(destName));
        return copyFile(name, destName);
    }));
};
exports.createLocalFilesPort = context => {
    const projectDir = path_1.default.resolve(context.projectDir);
    const reviewDir = context.reviewDir || path_1.default.resolve(projectDir, '.review');
    const toDestination = (relativeName) => {
        return path_1.default.join(reviewDir, relativeName);
    };
    mkdirp_1.default.sync(reviewDir);
    return {
        readProjectDirRecursive: exports.readProjectDirRecursive,
        readFileFromProject: (filename) => readFile(path_1.default.join(projectDir, filename), {
            encoding: 'utf-8',
        }),
        writeFileToDisk: (relativeName, content) => {
            const filename = toDestination(relativeName);
            mkdirp_1.default.sync(path_1.default.dirname(filename));
            return writeFile(filename, content);
        },
        exportFileToDisk: (filename) => {
            return copyFile(path_1.default.join(projectDir, filename), toDestination(filename));
        },
        exportFilesToDiskRecursive: (name) => {
            return exports.copyFileRecursive(path_1.default.join(projectDir, name), toDestination(name));
        },
        getExportPath: () => reviewDir,
    };
};
//# sourceMappingURL=local-files.js.map