"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = __importDefault(require("child_process"));
const path_1 = __importDefault(require("path"));
const tasks_1 = require("./tasks");
const config_1 = require("./config");
const reError = /^WARN: review-pdfmaker: (.*\.re):([0-9]+): error: (.+)$/;
exports.parseReviewMessage = (s) => {
    return s
        .split('\n')
        .map(line => {
        const matched = reError.exec(line);
        if (!matched) {
            return null;
        }
        else {
            return {
                file: matched[1],
                line: Number.parseInt(matched[2]),
                message: matched[3],
            };
        }
    })
        .filter(v => v !== null);
};
exports.buildPdfByReview = (pres, reviewDir) => {
    return new Promise((resolve, reject) => {
        pres.progress('ReVIEWCompile');
        let data = '';
        const cp = child_process_1.default
            .spawn('review-pdfmaker', ['config.yml'], {
            cwd: reviewDir,
        })
            .on('close', code => {
            const reports = exports.parseReviewMessage(data);
            reports.forEach(report => pres.error(report));
            if (reports.length === 0) {
                resolve();
            }
            else {
                reject(data);
            }
        })
            .on('error', err => {
            reject(data);
        });
        cp.stdout.on('data', chunk => {
            data += chunk.toString();
        });
        cp.stderr.on('data', chunk => {
            data += chunk.toString();
        });
    });
};
exports.createBuildBookByReviewPort = ({ pres, files, fetchTemplates, }) => {
    const buildPdf = async (config) => {
        const reviewDir = files.getExportPath();
        const { catalog, templates, sty_templates } = config_1.preparingConfig(config);
        if (sty_templates) {
            const { url, dir } = sty_templates;
            const styFiles = await fetchTemplates.fetch(url, dir);
            await Promise.all(styFiles.map(({ name, text }) => {
                return files.writeFileToDisk(path_1.default.join('sty', name), text);
            }));
        }
        const { tasks } = tasks_1.createCatalog(files, catalog);
        await Promise.all([
            tasks_1.writeYaml(files, 'catalog.yml', catalog),
            tasks_1.writeYaml(files, 'config.yml', config),
            ...tasks,
            tasks_1.copyTemplates(files, templates),
        ]);
        return exports.buildPdfByReview(pres, reviewDir);
    };
    return { buildPdf };
};
//# sourceMappingURL=build-book.js.map